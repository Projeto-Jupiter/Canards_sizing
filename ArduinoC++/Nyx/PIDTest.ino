#include <PID_v1.h>
#include <ESP32Servo.h>
#include <Wire.h>
#include <SPIFlash.h>
#include <SPI.h>

// variáveis do servo
Servo servo1;
Servo servo2;

// dado lido do vetor Data


// inicializa variaveis do controlador
float ServoOutput;              // Variables of interest
float Kp = 0.005, Ki = 0.01, Kd = 0.000;
//PID myPID(&dado_filtrado, &Output, &Setpoint, Kp, Ki, Kd, DIRECT);

// variáveis de controle de frequência de amostragem
int t0 = 0;
int t1 = 0;
int16_t delta = 0;
int periodo = 0.01;                                                     //Período de amostragem em segundos
int dataCont = 0;

float lastInput = 0.0;
float lastErr = 0.0;
int setPoint = 0;
float err;
float dado_filtrado;
float d_input;
float d_error;
float proportional;
float integral;
float derivative;
float dt = 0.01;
int lower = -8;
int upper = 8;
float Output; //usado na loop
float output; //usado na função computePID




// variáveis da memória
#define HSPI_MISO   12
#define HSPI_MOSI   13
#define HSPI_SCLK   14
#define HSPI_SS     15

//SPIClass *hspi = new SPIClass(HSPI);
//uint8_t chipSelect = 15;
//SPIFlash flash(chipSelect, hspi);

int16_t intermed;
int16_t concatenada; //variavel de leitura
int8_t byte0;
int8_t byte1;
int memCont = 0;

// Dados vindos do RocketPy [time(s), w3(rad/s), aZ(m/s²), z(m)]
float Data[370][4] = {
4.300000,14.232404,-12.708927,1023.807952,
4.310000,13.629274,-12.702243,1025.313747,
4.320000,13.068718,-12.695258,1026.818271,
4.330000,12.549098,-12.687991,1028.321526,
4.340000,12.064670,-12.680462,1029.823512,
4.350000,11.615280,-12.672690,1031.324230,
4.360000,11.196555,-12.664698,1032.823681,
4.370000,10.807271,-12.656511,1034.321865,
4.380000,10.443889,-12.648144,1035.818784,
4.390000,10.104877,-12.639628,1037.314438,
4.400000,9.788177,-12.630982,1038.808828,
4.410000,9.491009,-12.622230,1040.301955,
4.420000,9.213604,-12.613398,1041.793819,
4.430000,8.953415,-12.604506,1043.284422,
4.440000,8.709292,-12.595580,1044.773765,
4.450000,8.479626,-12.586642,1046.261848,
4.460000,8.263545,-12.577713,1047.748673,
4.470000,8.060172,-12.568816,1049.234240,
4.480000,7.868246,-12.559970,1050.718550,
4.490000,7.686975,-12.551196,1052.201604,
4.500000,7.515491,-12.542512,1053.683403,
4.510000,7.352989,-12.533935,1055.163947,
4.520000,7.198997,-12.525481,1056.643238,
4.530000,7.052775,-12.517164,1058.121277,
4.540000,6.913750,-12.508999,1059.598064,
4.550000,6.781404,-12.500996,1061.073600,
4.560000,6.655222,-12.493167,1062.547886,
4.570000,6.534758,-12.485523,1064.020922,
4.580000,6.419599,-12.478071,1065.492710,
4.590000,6.309352,-12.470820,1066.963250,
4.600000,6.203650,-12.463776,1068.432544,
4.610000,6.102267,-12.456944,1069.900590,
4.620000,6.004779,-12.450329,1071.367391,
4.630000,5.910995,-12.443933,1072.832947,
4.640000,5.820665,-12.437760,1074.297259,
4.650000,5.733497,-12.431810,1075.760327,
4.660000,5.649308,-12.426083,1077.222151,
4.670000,5.567989,-12.420578,1078.682734,
4.680000,5.489220,-12.415294,1080.142073,
4.690000,5.413017,-12.410229,1081.600172,
4.700000,5.338863,-12.405377,1083.057029,
4.710000,5.267095,-12.400736,1084.512646,
4.720000,5.197262,-12.396301,1085.967023,
4.730000,5.129411,-12.392066,1087.420160,
4.740000,5.063258,-12.388021,1088.872058,
4.750000,4.998925,-12.384161,1090.322717,
4.760000,4.936032,-12.380480,1091.772138,
4.770000,4.874710,-12.376968,1093.220321,
4.780000,4.814794,-12.373617,1094.667266,
4.790000,4.756123,-12.370413,1096.112974,
4.800000,4.698693,-12.367350,1097.557444,
4.810000,4.642691,-12.364418,1099.000678,
4.820000,4.587725,-12.361604,1100.442675,
4.830000,4.533892,-12.358898,1101.883437,
4.840000,4.481078,-12.356289,1103.322962,
4.850000,4.429305,-12.353766,1104.761252,
4.860000,4.378412,-12.351316,1106.198306,
4.870000,4.328451,-12.348928,1107.634125,
4.880000,4.279312,-12.346589,1109.068710,
4.890000,4.231109,-12.344289,1110.502059,
4.900000,4.183729,-12.342014,1111.934175,
4.910000,4.137155,-12.339753,1113.365056,
4.920000,4.090702,-12.337495,1114.794703,
4.930000,4.045577,-12.335228,1116.223116,
4.940000,4.001216,-12.332941,1117.650296,
4.950000,3.957487,-12.330622,1119.076242,
4.960000,3.914296,-12.328261,1120.500956,
4.970000,3.871777,-12.325846,1121.924437,
4.980000,3.829852,-12.323369,1123.346685,
4.990000,3.788394,-12.320818,1124.767700,
5.000000,3.747542,-12.318186,1126.187484,
5.010000,3.707423,-12.315464,1127.606036,
5.020000,3.667660,-12.312645,1129.023356,
5.030000,3.628455,-12.309722,1130.439445,
5.040000,3.589718,-12.306687,1131.854303,
5.050000,3.551588,-12.303536,1133.267930,
5.060000,3.513871,-12.300264,1134.680327,
5.070000,3.476672,-12.296865,1136.091494,
5.080000,3.439898,-12.293337,1137.501432,
5.090000,3.403731,-12.289676,1138.910140,
5.100000,3.367975,-12.285881,1140.317619,
5.110000,3.332570,-12.281949,1141.723869,
5.120000,3.297591,-12.277881,1143.128891,
5.130000,3.263135,-12.273677,1144.532686,
5.140000,3.228988,-12.269336,1145.935253,
5.150000,3.195293,-12.264861,1147.336593,
5.160000,3.161911,-12.260254,1148.736706,
5.170000,3.128958,-12.255518,1150.135594,
5.180000,3.096376,-12.250655,1151.533256,
5.190000,3.064148,-12.245670,1152.929693,
5.200000,3.032266,-12.240568,1154.324906,
5.210000,3.000839,-12.235353,1155.718894,
5.220000,2.969691,-12.230032,1157.111659,
5.230000,2.938921,-12.224610,1158.503201,
5.240000,2.908405,-12.219093,1159.893520,
5.250000,2.878301,-12.213489,1161.282618,
5.260000,2.848510,-12.207804,1162.670494,
5.270000,2.819062,-12.202046,1164.057149,
5.280000,2.789966,-12.196223,1165.442584,
5.290000,2.761130,-12.190341,1166.826800,
5.300000,2.732618,-12.184409,1168.209796,
5.310000,2.704492,-12.178435,1169.591574,
5.320000,2.676694,-12.172427,1170.972134,
5.330000,2.649143,-12.166392,1172.351477,
5.340000,2.621927,-12.160338,1173.729604,
5.350000,2.594995,-12.154274,1175.106514,
5.360000,2.568377,-12.148207,1176.482209,
5.370000,2.542032,-12.142144,1177.856689,
5.380000,2.515963,-12.136093,1179.229955,
5.390000,2.490160,-12.130062,1180.602007,
5.400000,2.464619,-12.124056,1181.972846,
5.410000,2.439419,-12.118083,1183.342473,
5.420000,2.414434,-12.112149,1184.710888,
5.430000,2.389739,-12.106260,1186.078092,
5.440000,2.365318,-12.100423,1187.444085,
5.450000,2.341134,-12.094642,1188.808868,
5.460000,2.317223,-12.088922,1190.172442,
5.470000,2.293580,-12.083269,1191.534807,
5.480000,2.270164,-12.077686,1192.895963,
5.490000,2.246977,-12.072178,1194.255912,
5.500000,2.224048,-12.066749,1195.614653,
5.510000,2.201358,-12.061401,1196.972188,
5.520000,2.178925,-12.056137,1198.328517,
5.530000,2.156724,-12.050959,1199.683640,
5.540000,2.134798,-12.045871,1201.037557,
5.550000,2.113089,-12.040873,1202.390271,
5.560000,2.091554,-12.035966,1203.741780,
5.570000,2.070273,-12.031152,1205.092086,
5.580000,2.049212,-12.026431,1206.441188,
5.590000,2.028366,-12.021804,1207.789088,
5.600000,2.007726,-12.017270,1209.135786,
5.610000,1.987355,-12.012829,1210.481282,
5.620000,1.967160,-12.008479,1211.825577,
5.630000,1.947127,-12.004221,1213.168670,
5.640000,1.927350,-12.000051,1214.510564,
5.650000,1.907767,-11.995969,1215.851257,
5.660000,1.888392,-11.991973,1217.190751,
5.670000,1.869248,-11.988059,1218.529046,
5.680000,1.850280,-11.984226,1219.866141,
5.690000,1.831506,-11.980470,1221.202039,
5.700000,1.812953,-11.976789,1222.536738,
5.710000,1.794656,-11.973179,1223.870240,
5.720000,1.776519,-11.969636,1225.202544,
5.730000,1.758534,-11.966157,1226.533651,
5.740000,1.740732,-11.962739,1227.863562,
5.750000,1.723114,-11.959377,1229.192277,
5.760000,1.705712,-11.956067,1230.519795,
5.770000,1.688483,-11.952805,1231.846118,
5.780000,1.671429,-11.949587,1233.171246,
5.790000,1.654549,-11.946407,1234.495179,
5.800000,1.637836,-11.943264,1235.817917,
5.810000,1.621325,-11.940150,1237.139460,
5.820000,1.604970,-11.937063,1238.459810,
5.830000,1.588779,-11.933997,1239.778966,
5.840000,1.572782,-11.930948,1241.096929,
5.850000,1.556941,-11.927912,1242.413698,
5.860000,1.541265,-11.924884,1243.729275,
5.870000,1.525739,-11.921860,1245.043659,
5.880000,1.510383,-11.918835,1246.356851,
5.890000,1.495177,-11.915806,1247.668851,
5.900000,1.480126,-11.912768,1248.979660,
5.910000,1.465236,-11.909718,1250.289277,
5.920000,1.450520,-11.906652,1251.597704,
5.930000,1.435939,-11.903565,1252.904939,
5.940000,1.421534,-11.900456,1254.210985,
5.950000,1.407269,-11.897319,1255.515840,
5.960000,1.393118,-11.894153,1256.819505,
5.970000,1.379130,-11.890954,1258.121981,
5.980000,1.365285,-11.887720,1259.423269,
5.990000,1.351583,-11.884448,1260.723367,
6.000000,1.338016,-11.881135,1262.022277,
6.010000,1.324604,-11.877781,1263.319998,
6.020000,1.311328,-11.874383,1264.616532,
6.030000,1.298197,-11.870939,1265.911879,
6.040000,1.285205,-11.867448,1267.206038,
6.050000,1.272339,-11.863910,1268.499011,
6.060000,1.259606,-11.860322,1269.790797,
6.070000,1.247001,-11.856685,1271.081397,
6.080000,1.234524,-11.852998,1272.370812,
6.090000,1.222171,-11.849260,1273.659041,
6.100000,1.209944,-11.845473,1274.946085,
6.110000,1.197840,-11.841636,1276.231945,
6.120000,1.185872,-11.837749,1277.516621,
6.130000,1.174025,-11.833814,1278.800113,
6.140000,1.162321,-11.829831,1280.082421,
6.150000,1.150731,-11.825802,1281.363547,
6.160000,1.139233,-11.821727,1282.643489,
6.170000,1.127868,-11.817608,1283.922250,
6.180000,1.116617,-11.813447,1285.199829,
6.190000,1.105485,-11.809246,1286.476227,
6.200000,1.094440,-11.805006,1287.751444,
6.210000,1.083559,-11.800729,1289.025480,
6.220000,1.072772,-11.796419,1290.298336,
6.230000,1.062101,-11.792076,1291.570012,
6.240000,1.051539,-11.787704,1292.840510,
6.250000,1.041079,-11.783305,1294.109828,
6.260000,1.030727,-11.778882,1295.377968,
6.270000,1.020481,-11.774436,1296.644931,
6.280000,1.010339,-11.769971,1297.910716,
6.290000,1.000298,-11.765490,1299.175323,
6.300000,0.990359,-11.760996,1300.438755,
6.310000,0.980527,-11.756490,1301.701010,
6.320000,0.970788,-11.751976,1302.962089,
6.330000,0.961144,-11.747457,1304.221994,
6.340000,0.951623,-11.742934,1305.480723,
6.350000,0.942194,-11.738413,1306.738279,
6.360000,0.932841,-11.733893,1307.994660,
6.370000,0.923595,-11.729379,1309.249868,
6.380000,0.914441,-11.724874,1310.503903,
6.390000,0.905385,-11.720378,1311.756766,
6.400000,0.896417,-11.715896,1313.008457,
6.410000,0.887563,-11.711429,1314.258976,
6.420000,0.878787,-11.706979,1315.508324,
6.430000,0.870104,-11.702549,1316.756501,
6.440000,0.861506,-11.698141,1318.003508,
6.450000,0.852991,-11.693757,1319.249345,
6.460000,0.844564,-11.689399,1320.494013,
6.470000,0.836224,-11.685068,1321.737512,
6.480000,0.827970,-11.680767,1322.979842,
6.490000,0.819804,-11.676496,1324.221004,
6.500000,0.811713,-11.672258,1325.460999,
6.510000,0.803705,-11.668053,1326.699826,
6.520000,0.795770,-11.663882,1327.937487,
6.530000,0.787926,-11.659747,1329.173981,
6.540000,0.780137,-11.655649,1330.409309,
6.550000,0.772438,-11.651589,1331.643471,
6.560000,0.764818,-11.647566,1332.876469,
6.570000,0.757287,-11.643582,1334.108302,
6.580000,0.749824,-11.639637,1335.338970,
6.590000,0.742450,-11.635731,1336.568474,
6.600000,0.735147,-11.631865,1337.796815,
6.610000,0.727935,-11.628038,1339.023993,
6.620000,0.720791,-11.624251,1340.250008,
6.630000,0.713721,-11.620503,1341.474860,
6.640000,0.706718,-11.616794,1342.698550,
6.650000,0.699789,-11.613124,1343.921079,
6.660000,0.692927,-11.609492,1345.142446,
6.670000,0.686134,-11.605898,1346.362653,
6.680000,0.679411,-11.602340,1347.581698,
6.690000,0.672756,-11.598818,1348.799584,
6.700000,0.666163,-11.595332,1350.016310,
6.710000,0.659637,-11.591879,1351.231876,
6.720000,0.653174,-11.588460,1352.446283,
6.730000,0.646775,-11.585073,1353.659531,
6.740000,0.640452,-11.581717,1354.871621,
6.750000,0.634190,-11.578390,1356.082552,
6.760000,0.627978,-11.575092,1357.292326,
6.770000,0.621836,-11.571820,1358.500942,
6.780000,0.615755,-11.568574,1359.708401,
6.790000,0.609738,-11.565352,1360.914703,
6.800000,0.603779,-11.562153,1362.119848,
6.810000,0.597894,-11.558975,1363.323837,
6.820000,0.592067,-11.555816,1364.526671,
6.830000,0.586273,-11.552676,1365.728349,
6.840000,0.580548,-11.549552,1366.928871,
6.850000,0.574876,-11.546442,1368.128239,
6.860000,0.569261,-11.543346,1369.326452,
6.870000,0.563700,-11.540262,1370.523510,
6.880000,0.558229,-11.537188,1371.719415,
6.890000,0.552770,-11.534122,1372.914166,
6.900000,0.547388,-11.531063,1374.107763,
6.910000,0.542065,-11.528010,1375.300208,
6.920000,0.536791,-11.524961,1376.491499,
6.930000,0.531573,-11.521913,1377.681638,
6.940000,0.526417,-11.518867,1378.870625,
6.950000,0.521309,-11.515821,1380.058460,
6.960000,0.516242,-11.512773,1381.245143,
6.970000,0.511231,-11.509721,1382.430676,
6.980000,0.506270,-11.506666,1383.615057,
6.990000,0.501361,-11.503604,1384.798287,
7.000000,0.496498,-11.500536,1385.980367,
7.010000,0.491696,-11.497460,1387.161297,
7.020000,0.486943,-11.494376,1388.341078,
7.030000,0.482239,-11.491281,1389.519709,
7.040000,0.477575,-11.488176,1390.697190,
7.050000,0.472953,-11.485059,1391.873523,
7.060000,0.468377,-11.481929,1393.048708,
7.070000,0.463853,-11.478787,1394.222744,
7.080000,0.459373,-11.475631,1395.395632,
7.090000,0.454931,-11.472460,1396.567373,
7.100000,0.450533,-11.469275,1397.737967,
7.110000,0.446178,-11.466075,1398.907413,
7.120000,0.441865,-11.462859,1400.075713,
7.130000,0.437600,-11.459627,1401.242867,
7.140000,0.433384,-11.456379,1402.408875,
7.150000,0.429207,-11.453115,1403.573737,
7.160000,0.425064,-11.449834,1404.737454,
7.170000,0.420967,-11.446537,1405.900026,
7.180000,0.416910,-11.443225,1407.061453,
7.190000,0.412895,-11.439896,1408.221736,
7.200000,0.408919,-11.436551,1409.380875,
7.210000,0.404991,-11.433191,1410.538870,
7.220000,0.401105,-11.429815,1411.695722,
7.230000,0.397258,-11.426425,1412.851431,
7.240000,0.393441,-11.423020,1414.005997,
7.250000,0.389660,-11.419601,1415.159421,
7.260000,0.385917,-11.416168,1416.311703,
7.270000,0.382218,-11.412723,1417.462843,
7.280000,0.378550,-11.409266,1418.612842,
7.290000,0.374921,-11.405797,1419.761701,
7.300000,0.371333,-11.402317,1420.909418,
7.310000,0.367777,-11.398827,1422.055996,
7.320000,0.364247,-11.395328,1423.201433,
7.330000,0.360755,-11.391821,1424.345731,
7.340000,0.357304,-11.388305,1425.488890,
7.350000,0.353885,-11.384783,1426.630910,
7.360000,0.350493,-11.381255,1427.771791,
7.370000,0.347139,-11.377722,1428.911535,
7.380000,0.343818,-11.374185,1430.050140,
7.390000,0.340531,-11.370644,1431.187608,
7.400000,0.337275,-11.367101,1432.323939,
7.410000,0.334058,-11.363557,1433.459134,
7.420000,0.330878,-11.360012,1434.593192,
7.430000,0.327727,-11.356468,1435.726114,
7.440000,0.324602,-11.352925,1436.857900,
7.450000,0.321505,-11.349385,1437.988551,
7.460000,0.318440,-11.345847,1439.118068,
7.470000,0.315411,-11.342314,1440.246449,
7.480000,0.312405,-11.338786,1441.373696,
7.490000,0.309435,-11.335263,1442.499810,
7.500000,0.306487,-11.331748,1443.624790,
7.510000,0.303569,-11.328239,1444.748637,
7.520000,0.300682,-11.324740,1445.871351,
7.530000,0.297819,-11.321249,1446.992932,
7.540000,0.294988,-11.317768,1448.113381,
7.550000,0.292187,-11.314298,1449.232699,
7.560000,0.289409,-11.310839,1450.350885,
7.570000,0.286661,-11.307391,1451.467940,
7.580000,0.283940,-11.303957,1452.583864,
7.590000,0.281247,-11.300536,1453.698658,
7.600000,0.278580,-11.297128,1454.812322,
7.610000,0.275944,-11.293734,1455.924856,
7.620000,0.273337,-11.290356,1457.036261,
7.630000,0.270755,-11.286992,1458.146537,
7.640000,0.268193,-11.283644,1459.255684,
7.650000,0.265656,-11.280312,1460.363703,
7.660000,0.263143,-11.276997,1461.470593,
7.670000,0.260660,-11.273698,1462.576356,
7.680000,0.258195,-11.270415,1463.680992,
7.690000,0.255764,-11.267150,1464.784500,
7.700000,0.253351,-11.263902,1465.886882,
7.710000,0.250959,-11.260672,1466.988137,
7.720000,0.248588,-11.257459,1468.088267,
7.730000,0.246242,-11.254263,1469.187270,
7.740000,0.243923,-11.251085,1470.285149,
7.750000,0.241626,-11.247925,1471.381902,
7.760000,0.239347,-11.244782,1472.477530,
7.770000,0.237093,-11.241657,1473.572034,
7.780000,0.234860,-11.238549,1474.665413,
7.790000,0.232650,-11.235458,1475.757669,
7.800000,0.230462,-11.232385,1476.848801,
7.810000,0.228299,-11.229328,1477.938810,
7.820000,0.226159,-11.226287,1479.027696,
7.830000,0.224040,-11.223263,1480.115460,
7.840000,0.221938,-11.220255,1481.202101,
7.850000,0.219855,-11.217263,1482.287620,
7.860000,0.217792,-11.214285,1483.372017,
7.870000,0.215754,-11.211323,1484.455293,
7.880000,0.213731,-11.208375,1485.537448,
7.890000,0.211735,-11.205441,1486.618482,
7.900000,0.209754,-11.202520,1487.698395,
7.910000,0.207790,-11.199613,1488.777189,
7.920000,0.205843,-11.196718,1489.854862,
7.930000,0.203917,-11.193835,1490.931415,
7.940000,0.202013,-11.190964,1492.006849,
7.950000,0.200126,-11.188104,1493.081165,
7.960000,0.198255,-11.185255,1494.154361,
7.970000,0.196403,-11.182415,1495.226438,
7.980000,0.194569,-11.179585,1496.297398,
7.990000,0.192754,-11.176764,1497.367239};

void setup() {
  Serial.begin(115200);
  //hspi->begin(HSPI_SCLK, HSPI_MISO, HSPI_MOSI, HSPI_SS); //SCLK, MISO, MOSI, SS
  Wire.begin();
  //flash.begin();

  // Atribui pinos aos servos
  servo1.attach(33); 
  servo2.attach(18);

 for (int pos = 70; pos <= 90; pos += 1) { // goes from 0 degrees to 180 degrees
    // in steps of 1 degree
    servo1.write(pos);              // tell servo to go to position in variable 'pos'
    servo2.write(pos);
    delay(20);                       // waits 15ms for the servo to reach the position
  }
  for (int pos = 90; pos >= 70; pos -= 1) { // goes from 180 degrees to 0 degrees
    servo1.write(pos);              // tell servo to go to position in variable 'pos'
    servo2.write(pos);
    delay(20);                       // waits 15ms for the servo to reach the position
  }
  
  // Prepara controlador
  //Setpoint = 0; // Velocidade angular desejada
  //myPID.SetMode(AUTOMATIC); //turn the PID on
  //myPID.SetOutputLimits(-8, 8);
  // myPID.SetSampleTime(10); // The sample time is being manually controlled on the loop
  
  delay(2000);
  t0 = millis();
}

void loop() {
  t1 = millis();

   //if(dataCont <= 369) {
   if ((t1 - t0) >= 10 && dataCont <= 369) {
   
    dado_filtrado = Data[dataCont][1];
    Output = computePID(dado_filtrado)*180/3.1416;
    
    //myPID.Compute();
    // Convert canard output to servo output
    ServoOutput = Output + 90;
    // Write output on the servo
    Serial.println(ServoOutput);
    servo1.write(ServoOutput); // Output
    servo2.write((ServoOutput + 10)); // Output

    //intermed = int16_t(ServoOutput * 1000);
    //byte0 = (intermed & 255);
    //byte1 = ((intermed >> 8) & 255);
    //flash.writeByte(memCont, byte0);
    //memCont++;
    //flash.writeByte(memCont, byte1);
    //memCont++;

    //delta = int16_t(t1-t0);
    //byte0 = (delta & 255);
    //byte1 = ((delta >> 8) & 255);
    //flash.writeByte(memCont, byte0);
    //memCont++;
    //flash.writeByte(memCont, byte1);
    memCont++;
    
    dataCont++;
    t0 = t1;
  }
  if(dataCont == 370) {
    Serial.println("DONE");
    dataCont++;
  }
}

float computePID(float dadoFiltrado) {

    dado_filtrado = dadoFiltrado;

    //Compute error terms
    err = setPoint - dado_filtrado;
    d_input = dado_filtrado - lastInput;
    d_error = err - lastErr; 

    //Compute the proportional term
    proportional = Kp * err;

    //Compute integral and derivative terms
    integral += Ki * err * dt;
    integral = clamp(integral, lower, upper);  //Avoid integral windup

    derivative = -Kd * d_input / dt;

    //Compute final output
    output = proportional + integral + derivative;
    output = clamp(output, lower, upper);

    //Keep track of state
    lastInput = dado_filtrado;
    lastErr = err;
return output;
}

float clamp(float value, int lower, int upper) {
    int low;
    int up;
  
    low = lower;
    up = upper;
    if (value > up)
        return up;
    if (value < low)
        return low;
return value;
}
